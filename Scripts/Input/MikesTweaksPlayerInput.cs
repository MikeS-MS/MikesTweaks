//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/LethalCompany/MikesTweaksPlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using LethalAutocomplete;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace MikesTweaks.Scripts.Input
{ 
    public partial class @MikesTweaksPlayerInput : IDisposable
    {
        public @MikesTweaksPlayerInput()
        {
            _keybinds = new Keybinds();
            m_Hotbar_Hotbar1 = _keybinds.HotBarAction(1);
            m_Hotbar_Hotbar2 = _keybinds.HotBarAction(2);
            m_Hotbar_Hotbar3 = _keybinds.HotBarAction(3);
            m_Hotbar_Hotbar4 = _keybinds.HotBarAction(4);
            m_Hotbar_Hotbar5 = _keybinds.HotBarAction(5);
            m_Hotbar_Hotbar6 = _keybinds.HotBarAction(6);
            m_Hotbar_Hotbar7 = _keybinds.HotBarAction(7);
            m_Hotbar_Hotbar8 = _keybinds.HotBarAction(8);
            m_Hotbar_Hotbar9 = _keybinds.HotBarAction(9);
            m_Emotes_Emote1 = _keybinds.Emote(1);
            m_Emotes_Emote2 = _keybinds.Emote(2);

            m_Actions_FlashlightToggle = _keybinds.FlashlightAction;
            m_Actions_WalkieTalkieSpeak = _keybinds.WalkieTalkieAction;

        }

        public void Dispose()
        {
        }

        private readonly Keybinds _keybinds;
        private List<IEmotesActions> m_EmotesActionsCallbackInterfaces = new List<IEmotesActions>();
        private List<IHotbarActions> m_HotbarActionsCallbackInterfaces = new List<IHotbarActions>();
        private List<IActionsActions> m_ActionsActionsCallbackInterfaces = new List<IActionsActions>();

        public HotbarActions @Hotbar => new HotbarActions(this);
        public EmotesActions @Emotes => new EmotesActions(this);
        public ActionsActions @Actions => new ActionsActions(this);

        // Hotbar
        private readonly InputActionMap m_Hotbar;
        private readonly InputAction m_Hotbar_Hotbar1;
        private readonly InputAction m_Hotbar_Hotbar2;
        private readonly InputAction m_Hotbar_Hotbar3;
        private readonly InputAction m_Hotbar_Hotbar4;
        private readonly InputAction m_Hotbar_Hotbar5;
        private readonly InputAction m_Hotbar_Hotbar6;
        private readonly InputAction m_Hotbar_Hotbar7;
        private readonly InputAction m_Hotbar_Hotbar8;
        private readonly InputAction m_Hotbar_Hotbar9;

        // Emotes
        private readonly InputAction m_Emotes_Emote1;
        private readonly InputAction m_Emotes_Emote2;

        // Actions
        private readonly InputAction m_Actions_FlashlightToggle;
        private readonly InputAction m_Actions_WalkieTalkieSpeak;


        public struct HotbarActions
        {
            private @MikesTweaksPlayerInput m_Wrapper;

            public HotbarActions(@MikesTweaksPlayerInput wrapper)
            {
                m_Wrapper = wrapper;
            }

            public InputAction @Hotbar1 => m_Wrapper.m_Hotbar_Hotbar1;
            public InputAction @Hotbar2 => m_Wrapper.m_Hotbar_Hotbar2;
            public InputAction @Hotbar3 => m_Wrapper.m_Hotbar_Hotbar3;
            public InputAction @Hotbar4 => m_Wrapper.m_Hotbar_Hotbar4;
            public InputAction @Hotbar5 => m_Wrapper.m_Hotbar_Hotbar5;
            public InputAction @Hotbar6 => m_Wrapper.m_Hotbar_Hotbar6;
            public InputAction @Hotbar7 => m_Wrapper.m_Hotbar_Hotbar7;
            public InputAction @Hotbar8 => m_Wrapper.m_Hotbar_Hotbar8;
            public InputAction @Hotbar9 => m_Wrapper.m_Hotbar_Hotbar9;

            public void AddCallbacks(IHotbarActions instance)
            {
                if (instance == null || m_Wrapper.m_HotbarActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_HotbarActionsCallbackInterfaces.Add(instance);
                @Hotbar1.started += instance.OnHotbar1;
                @Hotbar1.performed += instance.OnHotbar1;
                @Hotbar1.canceled += instance.OnHotbar1;
                @Hotbar2.started += instance.OnHotbar2;
                @Hotbar2.performed += instance.OnHotbar2;
                @Hotbar2.canceled += instance.OnHotbar2;
                @Hotbar3.started += instance.OnHotbar3;
                @Hotbar3.performed += instance.OnHotbar3;
                @Hotbar3.canceled += instance.OnHotbar3;
                @Hotbar4.started += instance.OnHotbar4;
                @Hotbar4.performed += instance.OnHotbar4;
                @Hotbar4.canceled += instance.OnHotbar4;
                @Hotbar5.started += instance.OnHotbar5;
                @Hotbar5.performed += instance.OnHotbar5;
                @Hotbar5.canceled += instance.OnHotbar5;
                @Hotbar6.started += instance.OnHotbar6;
                @Hotbar6.performed += instance.OnHotbar6;
                @Hotbar6.canceled += instance.OnHotbar6;
                @Hotbar7.started += instance.OnHotbar7;
                @Hotbar7.performed += instance.OnHotbar7;
                @Hotbar7.canceled += instance.OnHotbar7;
                @Hotbar8.started += instance.OnHotbar8;
                @Hotbar8.performed += instance.OnHotbar8;
                @Hotbar8.canceled += instance.OnHotbar8;
                @Hotbar9.started += instance.OnHotbar9;
                @Hotbar9.performed += instance.OnHotbar9;
                @Hotbar9.canceled += instance.OnHotbar9;
            }

            private void UnregisterCallbacks(IHotbarActions instance)
            {
                @Hotbar1.started -= instance.OnHotbar1;
                @Hotbar1.performed -= instance.OnHotbar1;
                @Hotbar1.canceled -= instance.OnHotbar1;
                @Hotbar2.started -= instance.OnHotbar2;
                @Hotbar2.performed -= instance.OnHotbar2;
                @Hotbar2.canceled -= instance.OnHotbar2;
                @Hotbar3.started -= instance.OnHotbar3;
                @Hotbar3.performed -= instance.OnHotbar3;
                @Hotbar3.canceled -= instance.OnHotbar3;
                @Hotbar4.started -= instance.OnHotbar4;
                @Hotbar4.performed -= instance.OnHotbar4;
                @Hotbar4.canceled -= instance.OnHotbar4;
                @Hotbar5.started -= instance.OnHotbar5;
                @Hotbar5.performed -= instance.OnHotbar5;
                @Hotbar5.canceled -= instance.OnHotbar5;
                @Hotbar6.started -= instance.OnHotbar6;
                @Hotbar6.performed -= instance.OnHotbar6;
                @Hotbar6.canceled -= instance.OnHotbar6;
                @Hotbar7.started -= instance.OnHotbar7;
                @Hotbar7.performed -= instance.OnHotbar7;
                @Hotbar7.canceled -= instance.OnHotbar7;
                @Hotbar8.started -= instance.OnHotbar8;
                @Hotbar8.performed -= instance.OnHotbar8;
                @Hotbar8.canceled -= instance.OnHotbar8;
                @Hotbar9.started -= instance.OnHotbar9;
                @Hotbar9.performed -= instance.OnHotbar9;
                @Hotbar9.canceled -= instance.OnHotbar9;
            }

            public void RemoveCallbacks(IHotbarActions instance)
            {
                if (m_Wrapper.m_HotbarActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IHotbarActions instance)
            {
                foreach (var item in m_Wrapper.m_HotbarActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_HotbarActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }

        public struct EmotesActions
        {
            private @MikesTweaksPlayerInput m_Wrapper;

            public EmotesActions(@MikesTweaksPlayerInput wrapper)
            {
                m_Wrapper = wrapper;
            }

            public InputAction @Emote1 => m_Wrapper.m_Emotes_Emote1;
            public InputAction @Emote2 => m_Wrapper.m_Emotes_Emote2;

            public void AddCallbacks(IEmotesActions instance)
            {
                if (instance == null || m_Wrapper.m_EmotesActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_EmotesActionsCallbackInterfaces.Add(instance);
                @Emote1.started += instance.OnEmote1;
                @Emote1.performed += instance.OnEmote1;
                @Emote1.canceled += instance.OnEmote1;
                @Emote2.started += instance.OnEmote2;
                @Emote2.performed += instance.OnEmote2;
                @Emote2.canceled += instance.OnEmote2;
            }

            private void UnregisterCallbacks(IEmotesActions instance)
            {
                @Emote1.started -= instance.OnEmote1;
                @Emote1.performed -= instance.OnEmote1;
                @Emote1.canceled -= instance.OnEmote1;
                @Emote2.started -= instance.OnEmote2;
                @Emote2.performed -= instance.OnEmote2;
                @Emote2.canceled -= instance.OnEmote2;
            }

            public void RemoveCallbacks(IEmotesActions instance)
            {
                if (m_Wrapper.m_EmotesActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IEmotesActions instance)
            {
                foreach (var item in m_Wrapper.m_EmotesActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_EmotesActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }


        public struct ActionsActions
        {
            private @MikesTweaksPlayerInput m_Wrapper;

            public ActionsActions(@MikesTweaksPlayerInput wrapper)
            {
                m_Wrapper = wrapper;
            }

            public InputAction @FlashlightToggle => m_Wrapper.m_Actions_FlashlightToggle;
            public InputAction @WalkieTalkieSpeak => m_Wrapper.m_Actions_WalkieTalkieSpeak;

            public void AddCallbacks(IActionsActions instance)
            {
                if (instance == null || m_Wrapper.m_ActionsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ActionsActionsCallbackInterfaces.Add(instance);
                @FlashlightToggle.started += instance.OnFlashlightToggle;
                @FlashlightToggle.performed += instance.OnFlashlightToggle;
                @FlashlightToggle.canceled += instance.OnFlashlightToggle;
                @WalkieTalkieSpeak.started += instance.OnWalkieTalkieSpeak;
                @WalkieTalkieSpeak.performed += instance.OnWalkieTalkieSpeak;
                @WalkieTalkieSpeak.canceled += instance.OnWalkieTalkieSpeak;
            }

            private void UnregisterCallbacks(IActionsActions instance)
            {
                @FlashlightToggle.started -= instance.OnFlashlightToggle;
                @FlashlightToggle.performed -= instance.OnFlashlightToggle;
                @FlashlightToggle.canceled -= instance.OnFlashlightToggle;
                @WalkieTalkieSpeak.started -= instance.OnWalkieTalkieSpeak;
                @WalkieTalkieSpeak.performed -= instance.OnWalkieTalkieSpeak;
                @WalkieTalkieSpeak.canceled -= instance.OnWalkieTalkieSpeak;
            }

            public void RemoveCallbacks(IActionsActions instance)
            {
                if (m_Wrapper.m_ActionsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IActionsActions instance)
            {
                foreach (var item in m_Wrapper.m_ActionsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ActionsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }


        public interface IHotbarActions
        {
            void OnHotbar1(InputAction.CallbackContext context);
            void OnHotbar2(InputAction.CallbackContext context);
            void OnHotbar3(InputAction.CallbackContext context);
            void OnHotbar4(InputAction.CallbackContext context);
            void OnHotbar5(InputAction.CallbackContext context);
            void OnHotbar6(InputAction.CallbackContext context);
            void OnHotbar7(InputAction.CallbackContext context);
            void OnHotbar8(InputAction.CallbackContext context);
            void OnHotbar9(InputAction.CallbackContext context);
        }

        public interface IEmotesActions
        {
            void OnEmote1(InputAction.CallbackContext context);
            void OnEmote2(InputAction.CallbackContext context);
        }

        public interface IActionsActions
        {
            void OnFlashlightToggle(InputAction.CallbackContext context);
            void OnWalkieTalkieSpeak(InputAction.CallbackContext context);
        }
    }
}